@using Microsoft.AspNetCore.Components.Authorization
@using MongoDB.Wrapper.Abstractions
@using ProjectManager.Models.Dto
@using ProjectManager.Models.Entities
@using ProjectManager.Models.Extensions
@using ProjectManager.Models.Statics
@attribute [Route(Routes.Stories.Edit)]
@inject IMongoDb _mongo
@inject ISnackbar _snack
@inject NavigationManager _nav

@if (Context is null)
{
	<MudProgressCircular Indeterminate />
}
else
{
	<MudText Typo="Typo.h2">
		Edycja historyjki
	</MudText>
	<MudText Typo="Typo.caption">
		@Context.Project.Name
	</MudText>
	
	@if (_story is not null)
	{
		<MudPaper Class="my-3 pa-3">
			<MudTextField @bind-Value="_story.Name" Label="Nazwa" Immediate />
			<MudTextField @bind-Value="_story.Description" Label="Opis" Immediate />
	
			<MudButton 
				Variant="Variant.Filled" 
				Color="Color.Success"
				Class="my-3"
				FullWidth 
				Disabled="string.IsNullOrEmpty(_story.Name) || string.IsNullOrEmpty(_story.Description)"
				OnClick="Submit">
				Edytuj
			</MudButton>

			<MudButton
				Variant="Variant.Text"
				Color="Color.Error"
				Class="my-3"
				OnClick="Delete">
				Usuń tą historyjkę
			</MudButton>
		</MudPaper>
	}
}

@code {
	
	[CascadingParameter]
	public ProjectContext? Context { get; set; }
	
	[CascadingParameter]
	public required Task<AuthenticationState> AuthState { get; set; }
	
	[Parameter]
	public Guid StoryId { get; set; }

	Story? _story;

	protected override void OnInitialized()
	{
		if (Context is null)
			_nav.NavigateTo(Routes.Index);
	}

	protected override async Task OnInitializedAsync()
	{
		_story = await _mongo.Get<Story>(StoryId);

		if (_story.OwnerId != (await AuthState).User.GetGuid())
		{
			_snack.Add("Nie możesz edytować nie swojej historyjki", Severity.Error);
			_nav.NavigateTo(Routes.Stories.GetDetails(_story.Id));
		}
	}

	async Task Submit()
	{
		if (string.IsNullOrEmpty(_story?.Name) || string.IsNullOrEmpty(_story?.Description))
			return;

		await _mongo.Replace(_story);
		_snack.Add("Zaktualizowano historyjkę", Severity.Success);
		
		_nav.NavigateTo(Routes.Stories.GetDetails(_story.Id));
	}

	async Task Delete()
	{
		if (_story is null)
			return;
		
		await _mongo.Delete<Story>(_story.Id);
		_snack.Add("Usunięto historyjkę", Severity.Success);
		
		_nav.NavigateTo(Routes.Index);
	}

}