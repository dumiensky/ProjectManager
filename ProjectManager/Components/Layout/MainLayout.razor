@using Microsoft.AspNetCore.Components.Authorization
@using MongoDB.Wrapper.Abstractions
@using ProjectManager.Models.Dto
@using ProjectManager.Models.Entities
@using ProjectManager.Models.Extensions
@using ProjectManager.Models.Statics
@using ProjectManager.Services.Interfaces
@inherits LayoutComponentBase
@inject IMongoDb _mongoDb
@inject IProjectContextHooks _projectContextHooks
@implements IDisposable

<MudThemeProvider @bind-IsDarkMode="_isDarkMode" Theme="Theme.Default" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
	<AuthorizeView>
		<MudAppBar>
			<MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="DrawerToggle" />
			<div>
				<MudText Typo="Typo.h6">Project Manager</MudText>
				<MudText Typo="Typo.caption">Projekt zaliczeniowy przedmiotu "Projektowanie aplikacji webowych"</MudText>
			</div>
			<MudSpacer />
			<MudToggleIconButton Toggled="_isDarkMode" ToggledChanged="SetIsDarkMode" Icon="@Icons.Material.Filled.DarkMode" ToggledIcon="@Icons.Material.Filled.LightMode" ToggledColor="Color.Warning" />
		</MudAppBar>
		<MudDrawer @bind-Open="@_drawerOpen">
			<NavMenu Projects="_projects" />
		</MudDrawer>
	</AuthorizeView>
	<MudMainContent>
		<AuthorizeView>
			<Authorized>
				@if (_projects is null)
				{
					<MudProgressLinear Indeterminate Class="my-5" />
				}
				else
				{
					<CascadingValue Value="_projectContext">
						<div class="pa-3">
							@Body
						</div>
					</CascadingValue>
				}
			</Authorized>
			<NotAuthorized>
				<LoginPage />
			</NotAuthorized>
		</AuthorizeView>
	</MudMainContent>
</MudLayout>

<div id="blazor-error-ui" style="color: red">
	An unhandled error has occurred.
	<a href="" class="reload">Reload</a>
	<a class="dismiss">🗙</a>
</div>

@code {
	
	[CascadingParameter]
	public required Task<AuthenticationState> AuthState { get; set; }
	
	bool _drawerOpen = true, _isDarkMode;
	UserContext? _userCtx;
	ProjectContext? _projectContext;
	List<Project>? _projects;

	protected override async Task OnInitializedAsync()
	{
		SetupHooks();
		
		var user = (await AuthState).User;
		if (user.GetId() is { } id)
		{
			_userCtx = await _mongoDb.FirstOrDefault<UserContext>(_ => _.UserId == id) 
						?? new()
						{
							UserId = id
						};
			_isDarkMode = _userCtx.DarkMode;
			var projects = await _mongoDb.Get<Project>();
			
			if (_userCtx.ProjectId.HasValue && 
				projects.FirstOrDefault(_ => _.Id == _userCtx.ProjectId.Value) is {} currentProject)
			{
				_projectContext = new(currentProject);
			}
			else if (projects.Any())
			{
				_projectContext = new(projects.First());
			}
			_projects = projects;
		}
	}

	void SetupHooks()
	{
		_projectContextHooks.OnCurrentProjectSet += ProjectContextHooksOnOnCurrentProjectSet;
	}

	async void ProjectContextHooksOnOnCurrentProjectSet(object? sender, Guid e)
	{
		_projects = await _mongoDb.Get<Project>();
		if (_projects?.FirstOrDefault(_ => _.Id == e) is { } newProject)
		{
			_projectContext = new(newProject);
			
		}
		else if (_projects?.Any() == true)
		{
			_projectContext = new(_projects.First());
		}
		else
		{
			_projectContext = null;
		}
		await InvokeAsync(StateHasChanged);
	}

	void DrawerToggle()
	{
		_drawerOpen = !_drawerOpen;
	}

	async Task SetIsDarkMode(bool value)
	{
		if (_userCtx is null)
			return;
		
		_userCtx.DarkMode = _isDarkMode = value;
		await _mongoDb.Replace(_userCtx);
	}

	void IDisposable.Dispose()
	{
		_projectContextHooks.OnCurrentProjectSet -= ProjectContextHooksOnOnCurrentProjectSet;
	}
}